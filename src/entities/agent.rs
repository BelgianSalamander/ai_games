//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use async_trait::async_trait;
use sea_orm::entity::prelude::*;

use crate::util::ActiveValueExtension;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "agent")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub language: String,
    pub directory: String,
    #[sea_orm(column_type = "Double")]
    pub rating: f64,
    #[sea_orm(column_type = "Double")]
    pub total_score: f64,
    pub num_games: i32,
    pub removed: bool,
    pub error_file: Option<String>,
    pub source_file: Option<String>,
    pub in_game: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_delete<C>(self, db: &C) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        //TODO: Make this async?
        
        if let Some(src_file) = self.directory.get() {
            std::fs::remove_file(src_file).unwrap();
        }

        std::fs::remove_dir_all(self.directory.get().unwrap()).unwrap();

        Ok(self)
    }
}
